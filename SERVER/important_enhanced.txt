הכלי פותח ע"י חברת רוטליין לשימוש עבור לקוחותיה בנושאי חקירה וניתוח מידע במערכת המידע שלהם

# מערכת BI - מדריך מתקדם לחוקי עסק

## 1. הערות על מכירות

### שמות עמודות מדויקים - טבלת שורות_מכירה:
- תאריך: `תאריך_חשבונית`
- מחיר: `מחיר_אחרי_הנחה_מצטברת`
- כמות: `כמות`
- סכום: `סכום_אחרי_הנחה`
- לקוח: `קוד_לקוח`, `תיאור_לקוח`
- פריט: `קוד_פריט`, `תיאור_פריט`
- חשבונית: `מספר_חשבונית`

### חישוב סכום מכירות:
```sql
SUM(סכום_אחרי_הנחה) AS סכום_מכירות
```

### דוגמאות SQL למכירות:

#### מכירות לפי חודש ושנה:
```sql
SELECT 
  date_part('year', תאריך_חשבונית) AS שנה,
  date_part('month', תאריך_חשבונית) AS חודש,
  ROUND(SUM(סכום_אחרי_הנחה), 2) AS סכום_מכירות
FROM שורות_מכירה
GROUP BY 1, 2
ORDER BY 1, 2
```

#### 10 הגריידים עם הכי הרבה מכירות:
```sql
SELECT 
  p.גרייד,
  ROUND(SUM(s.סכום_אחרי_הנחה), 2) AS סכום_מכירות
FROM שורות_מכירה s
JOIN פריט_גרייד p ON s.קוד_פריט = p.קוד_פריט
WHERE date_part('year', s.תאריך_חשבונית) = 2025
GROUP BY 1
ORDER BY 2 DESC
LIMIT 10
```

## 2. הערות על תנועות יומן - קריטי!

### עמודות עיקריות:
- תאריך מאזן: `ת._למאזן`
- תאריך ערך: `ת._ערך` (תאריך פרעון החוב לפי תנאי התשלום)
- חשבון: `חשבון`, `תאור_חשבון`
- סכום: `סכום_בשקלים`
- חובה/זכות: `חובה/זכות` (C=זכות, D=חובה)
- אסמכתא: `אסמכתא`
- פרטים: `פרטים`
- התאמה פנימית: `מס._התאמה_פנימית` (0=לא מותאם/חוב פתוח, >0=מותאם)

### **כלל קריטי - חישוב סכום נכון לפי חובה/זכות:**
- חובה (D): סכום חיובי → `סכום_בשקלים`
- זכות (C): סכום שלילי → `סכום_בשקלים * -1`
- או להשתמש בעמודות הנפרדות: `חובה_בשקלים`, `זכות_בשקלים`

### זיהוי לקוחות וספקים:
**קריטי:** קוד לקוח = מספר חשבון הלקוח. לדוגמה:
- לקוח עם קוד "1001" ← החשבון שלו בתנועות יומן הוא "1001"

**חשוב:** לזיהוי לקוחות/ספקים צריך JOIN עם טבלת חשבונות_כללי:
```sql
-- כרטסת לקוחות (חובות פתוחים)
FROM תנועות_יומן t
JOIN חשבונות_כללי c ON t.חשבון = c.חשבון
WHERE c."סעיף_מאזן/רווח_והפסד" IN ('לקוחות', 'לקוחות/ספקים')
  AND t."מס._התאמה_פנימית" = 0  -- חובות לא מותאמים

-- כרטסת ספקים (חובות פתוחים)  
FROM תנועות_יומן t
JOIN חשבונות_כללי c ON t.חשבון = c.חשבון
WHERE c."סעיף_מאזן/רווח_והפסד" IN ('ספקים', 'לקוחות/ספקים')
  AND t."מס._התאמה_פנימית" = 0  -- חובות לא מותאמים
```

### דוגמאות SQL לתנועות יומן:

#### חובות פתוחים של לקוחות:
```sql
SELECT 
  t.חשבון,
  c.תאור_חשבון,
  t.אסמכתא,
  CAST(t."ת._ערך" AS DATE) AS תאריך_פרעון,
  ROUND(CASE 
    WHEN t."חובה/זכות" = 'D' THEN t."סכום_בשקלים"
    WHEN t."חובה/זכות" = 'C' THEN t."סכום_בשקלים" * -1
    ELSE t."סכום_בשקלים"
  END, 2) AS סכום_חוב
FROM תנועות_יומן t
JOIN חשבונות_כללי c ON t.חשבון = c.חשבון
WHERE c."סעיף_מאזן/רווח_והפסד" IN ('לקוחות', 'לקוחות/ספקים')
  AND t."מס._התאמה_פנימית" = 0
ORDER BY CAST(t."ת._ערך" AS DATE)
```

#### חובות פתוחים של ספקים:
```sql
SELECT 
  t.חשבון,
  c.תאור_חשבון,
  t.אסמכתא,
  CAST(t."ת._ערך" AS DATE) AS תאריך_פרעון,
  ROUND(CASE 
    WHEN t."חובה/זכות" = 'D' THEN t."סכום_בשקלים"
    WHEN t."חובה/זכות" = 'C' THEN t."סכום_בשקלים" * -1
    ELSE t."סכום_בשקלים"
  END, 2) AS סכום_חוב
FROM תנועות_יומן t
JOIN חשבונות_כללי c ON t.חשבון = c.חשבון
WHERE c."סעיף_מאזן/רווח_והפסד" IN ('ספקים', 'לקוחות/ספקים')
  AND t."מס._התאמה_פנימית" = 0
ORDER BY CAST(t."ת._ערך" AS DATE)
```

#### גיול חובות לקוחות:
```sql
SELECT 
  t.חשבון AS קוד_לקוח,
  c.תאור_חשבון AS שם_לקוח,
  ROUND(SUM(CASE 
    WHEN t."חובה/זכות" = 'D' THEN t."סכום_בשקלים"
    WHEN t."חובה/זכות" = 'C' THEN t."סכום_בשקלים" * -1
    ELSE t."סכום_בשקלים"
  END), 2) AS סכום_חוב_כולל,
  ROUND(SUM(CASE 
    WHEN CURRENT_DATE - CAST(t."ת._ערך" AS DATE) BETWEEN 1 AND 30 
    THEN (CASE WHEN t."חובה/זכות" = 'D' THEN t."סכום_בשקלים" ELSE t."סכום_בשקלים" * -1 END)
    ELSE 0 END), 2) AS חוב_1_30_ימים,
  ROUND(SUM(CASE 
    WHEN CURRENT_DATE - CAST(t."ת._ערך" AS DATE) BETWEEN 31 AND 60 
    THEN (CASE WHEN t."חובה/זכות" = 'D' THEN t."סכום_בשקלים" ELSE t."סכום_בשקלים" * -1 END)
    ELSE 0 END), 2) AS חוב_31_60_ימים,
  ROUND(SUM(CASE 
    WHEN CURRENT_DATE - CAST(t."ת._ערך" AS DATE) BETWEEN 61 AND 90 
    THEN (CASE WHEN t."חובה/זכות" = 'D' THEN t."סכום_בשקלים" ELSE t."סכום_בשקלים" * -1 END)
    ELSE 0 END), 2) AS חוב_61_90_ימים,
  ROUND(SUM(CASE 
    WHEN CURRENT_DATE - CAST(t."ת._ערך" AS DATE) > 90 
    THEN (CASE WHEN t."חובה/זכות" = 'D' THEN t."סכום_בשקלים" ELSE t."סכום_בשקלים" * -1 END)
    ELSE 0 END), 2) AS חוב_מעל_90_ימים
FROM תנועות_יומן t
JOIN חשבונות_כללי c ON t.חשבון = c.חשבון
WHERE c."סעיף_מאזן/רווח_והפסד" IN ('לקוחות', 'לקוחות/ספקים')
  AND t."מס._התאמה_פנימית" = 0
GROUP BY 1, 2
ORDER BY 3 DESC
```

### דוגמאות SQL להזמנות:

#### הזמנות לקוח פתוחות עם יתרת סכום:
```sql
SELECT 
  h.הזמנה,
  h.שם_לקוח,
  h.מקט,
  h.תאור_מוצר,
  h.יתרה_לאספקה,
  ROUND(h.יתרה_לאספקה * h.מחיר_בתעודה, 2) AS יתרת_סכום
FROM שורות_הזמנות_לקוח h
WHERE h.סגורה IS NULL
  AND h.יתרה_לאספקה > 0
ORDER BY יתרת_סכום DESC
```

#### הזמנות רכש פתוחות עם יתרת סכום:
```sql
SELECT 
  p.הזמנה,
  p.שם_ספק,
  p.מקט,
  p.תאור_מוצר,
  p.יתרה_לאספקה,
  ROUND(p.יתרה_לאספקה * p.מחיר_בתעודה, 2) AS יתרת_סכום
FROM פירוט_הזמנות_רכש p
WHERE p.סגורה IS NULL
  AND p.יתרה_לאספקה > 0
ORDER BY יתרת_סכום DESC
```

#### סיכום הזמנות פתוחות לפי לקוח:
```sql
SELECT 
  h.מס._לקוח,
  h.שם_לקוח,
  COUNT(*) AS מספר_שורות_פתוחות,
  ROUND(SUM(h.יתרה_לאספקה * h.מחיר_בתעודה), 2) AS סכום_הזמנות_פתוחות
FROM שורות_הזמנות_לקוח h
WHERE h.סגורה IS NULL
  AND h.יתרה_לאספקה > 0
GROUP BY 1, 2
ORDER BY 4 DESC
```

#### סיכום הזמנות רכש פתוחות לפי ספק:
```sql
SELECT 
  p.מס_ספק,
  p.שם_ספק,
  COUNT(*) AS מספר_שורות_פתוחות,
  ROUND(SUM(p.יתרה_לאספקה * p.מחיר_בתעודה), 2) AS סכום_הזמנות_פתוחות
FROM פירוט_הזמנות_רכש p
WHERE p.סגורה IS NULL
  AND p.יתרה_לאספקה > 0
GROUP BY 1, 2
ORDER BY 4 DESC
```

#### דוגמה להבדל בין סכום כולל ליתרת הזמנה:
```sql
-- ❌ שגוי - מציג סכום כולל של ההזמנה (כולל מה שכבר נמכר)
SELECT 
  h.הזמנה,
  h.שם_לקוח,
  h.מקט,
  ROUND(SUM(h.סהכ_אחרי_הנחה), 2) AS סכום_כולל_שגוי
FROM שורות_הזמנות_לקוח h
WHERE h.סגורה IS NULL
GROUP BY 1, 2, 3

-- ✅ נכון - מציג רק יתרת הזמנה (מה שעדיין צריך לספק)
SELECT 
  h.הזמנה,
  h.שם_לקוח,
  h.מקט,
  ROUND(SUM(h.יתרה_לאספקה * h.מחיר_בתעודה), 2) AS יתרת_הזמנה_נכונה
FROM שורות_הזמנות_לקוח h
WHERE h.סגורה IS NULL
  AND h.יתרה_לאספקה > 0
GROUP BY 1, 2, 3
```

## 3. הערות על חשבונות

### טבלת חשבונות_כללי:
- חשבון: `חשבון`, `תאור_חשבון`
- יתרה: `יתרה_בשקלים`
- מטבע: `מטבע_החשבון`
- חתך: `חתך`, `תאור_חתך`
- סעיף מאזן: `סעיף_מאזן/רווח_והפסד` (קריטי לזיהוי לקוחות/ספקים)

### יתרות חשבונות:
```sql
SELECT 
  חשבון,
  תאור_חשבון,
  ROUND("יתרה_בשקלים", 2) AS יתרה
FROM חשבונות_כללי
WHERE "יתרה_בשקלים" != 0
ORDER BY ABS("יתרה_בשקלים") DESC
```

## 4. הערות על לקוחות

### טבלת כרטיס_לקוח:
- `קוד_לקוח`, `שם_לקוח`, `קוד_סוכן`, `שם_סוכן`

### חוב פתוח של לקוח ספציפי:
```sql
SELECT 
  t.חשבון AS קוד_לקוח,
  c.תאור_חשבון AS שם_לקוח,
  t.אסמכתא,
  CAST(t."ת._ערך" AS DATE) AS תאריך_פרעון,
  ROUND(CASE 
    WHEN t."חובה/זכות" = 'D' THEN t."סכום_בשקלים"
    WHEN t."חובה/זכות" = 'C' THEN t."סכום_בשקלים" * -1
    ELSE t."סכום_בשקלים"
  END, 2) AS סכום_חוב
FROM תנועות_יומן t
JOIN חשבונות_כללי c ON t.חשבון = c.חשבון
WHERE t.חשבון = '1001'  -- קוד הלקוח
  AND c."סעיף_מאזן/רווח_והפסד" IN ('לקוחות', 'לקוחות/ספקים')
  AND t."מס._התאמה_פנימית" = 0
ORDER BY CAST(t."ת._ערך" AS DATE)
```

## 5. הערות על מוצרים

### טבלת כרטיס_פריט:
- `קוד_פריט`, `תיאור_פריט`, `קוד_משפחת_פריט`, `תאור_משפחת_פריט`

### טבלת פריט_גרייד:
- `קוד_פריט`, `גרייד`

### פריטים לא פעילים שנמכרו השנה:
```sql
SELECT 
  k.קוד_פריט,
  k.תיאור_פריט,
  ROUND(SUM(s.סכום_אחרי_הנחה), 2) AS סכום_מכירות
FROM שורות_מכירה s
JOIN כרטיס_פריט k ON s.קוד_פריט = k.קוד_פריט
WHERE k.סטטוס != 'פעיל'
  AND date_part('year', s.תאריך_חשבונית) = 2025
GROUP BY 1, 2
ORDER BY 3 DESC
```

## 6. טבלאות נוספות

### שורות_חשבוניות_רכש:
- תאריך: `תאריך`
- ספק: `מס_ספק`, `שם_ספק`
- פריט: `מקט`, `תאור_מוצר`
- כמות: `כמות`
- מחיר: `מחיר_ליחידה`
- סכום: `סהכ_אחרי_הנחה`
- חשבונית: `חשבונית`

### שורות_הזמנות_לקוח:
- תאריך: `תאריך`
- לקוח: `מס._לקוח`, `שם_לקוח`
- פריט: `מקט`, `תאור_מוצר`
- כמות: `כמות`
- סכום: `סהכ_אחרי_הנחה`
- הזמנה: `הזמנה`
- סוכן: `מס_סוכן`, `שם_סוכן`
- **סגורה**: `סגורה` (Y=סגור, NULL=פתוח)
- **יתרה לאספקה**: `יתרה_לאספקה`
- **מחיר בתעודה**: `מחיר_בתעודה`
- **סטטוס הזמנה**: `סטטוס_הזמנה` (כותרת - לא אינדיקציה מדויקת)

**כלל חשוב**: 
- **הזמנה פתוחה**: `סגורה` IS NULL
- **הזמנה סגורה**: `סגורה` = 'Y'
- **יתרת סכום להזמנה**: `יתרה_לאספקה * מחיר_בתעודה`
- **הזמנה פתוחה חלקית**: `סגורה` IS NULL AND `יתרה_לאספקה` > 0

**⚠️ אזהרה קריטית**: 
- **אל תשתמש** ב-`סהכ_אחרי_הנחה` להזמנות פתוחות!
- `סהכ_אחרי_הנחה` מראה את סכום כל שורת ההזמנה (כולל מה שכבר נמכר)
- **השתמש תמיד** ב-`יתרה_לאספקה * מחיר_בתעודה` ליתרת הזמנה אמיתית

### פירוט_הזמנות_רכש:
- תאריך הזמנה: `ת._הזמנה`
- ספק: `מס_ספק`, `שם_ספק`
- פריט: `מקט`, `תאור_מוצר`
- כמות: `כמות`
- יתרה לאספקה: `יתרה_לאספקה`
- שווי יתרה: `שווי_יתרה`
- הזמנה: `הזמנה`
- **סגורה**: `סגורה` (Y=סגור, NULL=פתוח)
- **מחיר בתעודה**: `מחיר_בתעודה`
- **סטטוס הזמנה**: `סטטוס_הזמנה` (כותרת - לא אינדיקציה מדויקת)

**כלל חשוב**: 
- **הזמנה פתוחה**: `סגורה` IS NULL
- **הזמנה סגורה**: `סגורה` = 'Y'
- **יתרת סכום להזמנה**: `יתרה_לאספקה * מחיר_בתעודה`
- **הזמנה פתוחה חלקית**: `סגורה` IS NULL AND `יתרה_לאספקה` > 0

**⚠️ אזהרה קריטית**: 
- **אל תשתמש** ב-`סהכ_אחרי_הנחה` להזמנות פתוחות!
- `סהכ_אחרי_הנחה` מראה את סכום כל שורת ההזמנה (כולל מה שכבר נמכר)
- **השתמש תמיד** ב-`יתרה_לאספקה * מחיר_בתעודה` ליתרת הזמנה אמיתית



### שורות_תעודות_משלוח_החזרה:
- תאריך: `תאריך` - מתי בוצעה ההחזרה/המשלוח
- סוג תעודה: `סוג_תעודה` - "החזרה מלקוח" או "משלוחים ללקוח"
- הזמנה: `הזמנה` - מספר הזמנת הלקוח המקורית
- שורה: `שורה` - מספר שורת ההזמנה שסופקה/הוחזרה
- כמות: `כמות` - כמות שסופקה/הוחזרה
- לקוח: `מס._לקוח`, `שם_לקוח`
- פריט: `מקט`, `תאור_מוצר`

**כללים חשובים:**
- **משלוח**: `סוג_תעודה = 'משלוחים ללקוח'`
- **החזרה**: `סוג_תעודה = 'החזרה מלקוח'`
- **קישור להזמנה**: `הזמנה + שורה` מקשרים לשורת הזמנה מקורית
- **זמן אספקה**: `תאריך` (משלוח) - `תאריך` (הזמנה) = Lead Time

### דוגמאות SQL לניתוח משלוחים והחזרות:

#### ניתוח זמני אספקה:
```sql
SELECT 
  m.מס._לקוח,
  m.שם_לקוח,
  AVG(CAST(m.תאריך AS DATE) - CAST(h.תאריך AS DATE)) AS ממוצע_ימי_אספקה,
  MIN(CAST(m.תאריך AS DATE) - CAST(h.תאריך AS DATE)) AS מינימום_ימי_אספקה,
  MAX(CAST(m.תאריך AS DATE) - CAST(h.תאריך AS DATE)) AS מקסימום_ימי_אספקה
FROM שורות_תעודות_משלוח_החזרה m
JOIN שורות_הזמנות_לקוח h ON m.הזמנה = h.הזמנה AND m.שורה = h.שורה
WHERE m.סוג_תעודה = 'משלוחים ללקוח'
GROUP BY 1, 2
ORDER BY 3 DESC
```

#### ניתוח החזרות לפי מוצר:
```sql
SELECT 
  r.מקט,
  r.תאור_מוצר,
  COUNT(*) AS מספר_החזרות,
  SUM(r.כמות) AS כמות_הוחזרה,
  ROUND(100.0 * SUM(r.כמות) / NULLIF(SUM(m.כמות), 0), 2) AS אחוז_החזרה
FROM שורות_תעודות_משלוח_החזרה r
LEFT JOIN שורות_תעודות_משלוח_החזרה m 
  ON r.מקט = m.מקט 
  AND m.סוג_תעודה = 'משלוחים ללקוח'
WHERE r.סוג_תעודה = 'החזרה מלקוח'
GROUP BY 1, 2
HAVING SUM(r.כמות) > 0
ORDER BY 5 DESC
```

#### קשר בין זמן אספקה לנאמנות לקוח:
```sql
WITH delivery_performance AS (
  SELECT 
    m.מס._לקוח,
    AVG(CAST(m.תאריך AS DATE) - CAST(h.תאריך AS DATE)) AS ממוצע_ימי_אספקה
  FROM שורות_תעודות_משלוח_החזרה m
  JOIN שורות_הזמנות_לקוח h ON m.הזמנה = h.הזמנה AND m.שורה = h.שורה
  WHERE m.סוג_תעודה = 'משלוחים ללקוח'
  GROUP BY m.מס._לקוח
),
customer_loyalty AS (
  SELECT 
    קוד_לקוח,
    COUNT(DISTINCT date_part('month', תאריך_חשבונית)) AS חודשים_פעילים
  FROM שורות_מכירה
  WHERE date_part('year', תאריך_חשבונית) = 2025
  GROUP BY קוד_לקוח
)
SELECT 
  d.ממוצע_ימי_אספקה,
  AVG(l.חודשים_פעילים) AS ממוצע_נאמנות
FROM delivery_performance d
JOIN customer_loyalty l ON d.מס._לקוח = l.קוד_לקוח
GROUP BY 1
ORDER BY 1
```
```



## 7. יחסי טבלאות חיוניים

### עבור ניתוח גרייד:
```sql
FROM שורות_מכירה s
JOIN פריט_גרייד p ON s.קוד_פריט = p.קוד_פריט
GROUP BY p.גרייד
```

### עבור פרטי פריט:
```sql
FROM שורות_מכירה s
JOIN כרטיס_פריט k ON s.קוד_פריט = k.קוד_פריט
```

### עבור פרטי לקוח:
```sql
FROM שורות_מכירה s
JOIN כרטיס_לקוח l ON s.קוד_לקוח = l.קוד_לקוח
```

### עבור ניתוח רכש:
```sql
FROM שורות_חשבוניות_רכש r
JOIN כרטיס_פריט k ON r.מקט = k.קוד_פריט
```

### עבור ניתוח הזמנות לקוח פתוחות:
```sql
FROM שורות_הזמנות_לקוח h
JOIN כרטיס_לקוח l ON h.מס._לקוח = l.קוד_לקוח
WHERE h.סגורה IS NULL  -- הזמנות פתוחות
  AND h.יתרה_לאספקה > 0  -- יש יתרה לאספקה
-- השתמש ב: h.יתרה_לאספקה * h.מחיר_בתעודה לחישוב יתרת סכום
```

### עבור ניתוח הזמנות רכש פתוחות:
```sql
FROM פירוט_הזמנות_רכש p
JOIN כרטיס_פריט k ON p.מקט = k.קוד_פריט
WHERE p.סגורה IS NULL  -- הזמנות פתוחות
  AND p.יתרה_לאספקה > 0  -- יש יתרה לאספקה
-- השתמש ב: p.יתרה_לאספקה * p.מחיר_בתעודה לחישוב יתרת סכום
```

## 8. כללי SQL קריטיים - DuckDB

### תחביר DuckDB - קריטי:
- **אסור להשתמש ב-backticks (`) סביב שמות עמודות!**
- יש להשתמש רק בגרשיים רגילים (") או ללא גרשיים כלל
- דוגמה נכונה: `"ת._ערך"` או `ת._ערך`
- דוגמה שגויה: `` `ת._ערך` ``

### שמות עמודות ב-SELECT - קריטי:
- **אסור להשתמש בגרשיים (") בתוך שמות עמודות!**
- במקום `AS סהכ_חוב` השתמש ב-`AS סכום_חוב`
- במקום `AS ח"ח` השתמש ב-`AS חח`

### תאריכים:
- שנה: `date_part('year', תאריך_חשבונית)`
- חודש: `date_part('month', תאריך_חשבונית)`
- רבעון: `date_part('quarter', תאריך_חשבונית)`

### המרת תאריכים מ-VARCHAR ל-DATE:
```sql
CAST(תאריך AS DATE)
-- או
TRY_CAST(תאריך AS DATE)
```

### GROUP BY ו-ORDER BY - כללים חיוניים:
- **אסור להשתמש ב-aliases ב-GROUP BY!**
- תמיד השתמש במספרים או בביטוי המלא
- דוגמה נכונה: `GROUP BY 1, 2` או `GROUP BY date_part('year', תאריך)`

### מיון ותצוגה:
- "הכי הרבה": `ORDER BY סכום_מכירות DESC`
- "10 הראשונים": `LIMIT 10`
- עיגול כספי: `ROUND(סכום, 2)`

## 9. דוחות TOP-N עם קטגוריית OTHER

כאשר השאלה מבקשת "N הראשונים" (Top-N) ועוד קטגוריה אחת עבור כל השאר:
1. החזר תמיד **N + 1 שורות**
2. הטור הממדי יכול להיות כל עמודה רלוונטית – לקוח, פריט, ספק וכו'
3. קרא לשורה המאוחדת בשם 'OTHER'

תבנית פסאודו-קוד:
```sql
WITH ranked AS (
  SELECT <Dimension> AS קטגוריה,
         <MetricExpr>   AS מדד,
         ROW_NUMBER() OVER (ORDER BY <MetricExpr> DESC) AS rn
  FROM <BaseTables>
  <JOINs>
  <WHERE Filters>
  GROUP BY 1
),
 topN AS (
  SELECT קטגוריה, מדד FROM ranked WHERE rn <= <N>
),
 others AS (
  SELECT 'OTHER' AS קטגוריה, SUM(מדד) AS מדד
  FROM ranked WHERE rn > <N>
)
SELECT * FROM topN
UNION ALL
SELECT * FROM others;
```

## 10. הגדרות זמן נוכחיות

- שנה נוכחית: 2025
- רבעון ראשון: ינואר-מרץ
- רבעון שני: אפריל-יוני
- רבעון שלישי: יולי-ספטמבר
- רבעון רביעי: אוקטובר-דצמבר

## 11. כללי תשובה

### פורמט תשובה:
- תמיד תובנות עסקיות + המלצות
- לא SQL גולמי בתשובה

### סוגי ויזואליזציה:
- "עוגה" → pie chart
- "גרף עמודות" → bar chart  
- "קו" → line chart
- "טבלה" → table

### כלל קריטי – קריאה בלבד:
- יש להשתמש ב־SELECT בלבד
- אין לבצע ALTER / CREATE / INSERT / UPDATE / DELETE / DROP

### אל תספק בשאילתת SQL שדות שהם הסברים או הערות